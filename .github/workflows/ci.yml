name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Check code formatting
      run: npm run format
      continue-on-error: true
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for secrets in code
      run: |
        echo "Checking for exposed secrets..."
        
        # Check for real API keys (not examples)
        if grep -r "ALPACA_API_KEY=PK[A-Z0-9]\{20,\}" . \
          --exclude-dir=node_modules \
          --exclude-dir=.git \
          --exclude-dir=docs \
          --exclude="*.md"; then
          echo "ERROR: Found potential real API key in code!"
          exit 1
        fi
        
        # Check .env is not committed
        if git ls-files | grep -q "^\.env$"; then
          echo "ERROR: .env file should not be committed!"
          exit 1
        fi
        
        echo "No secrets found in code"
      shell: bash
    
    - name: Check for sensitive patterns
      run: |
        echo "Checking for sensitive patterns..."
        
        # Check for private keys (exclude documentation)
        if grep -r "BEGIN.*PRIVATE KEY" . \
          --exclude-dir=node_modules \
          --exclude-dir=.git \
          --exclude-dir=docs \
          --exclude="*.md"; then
          echo "ERROR: Found private key in code!"
          exit 1
        fi
        
        echo "No sensitive patterns found"
      shell: bash

  # Job 3: Project Structure Validation
  structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify required files
      run: |
        echo "Checking required files..."
        
        # Core files
        test -f package.json || { echo "Missing package.json"; exit 1; }
        test -f README.md || { echo "Missing README.md"; exit 1; }
        test -f LICENSE || { echo "Missing LICENSE"; exit 1; }
        test -f SECURITY.md || { echo "Missing SECURITY.md"; exit 1; }
        test -f CONTRIBUTING.md || { echo "Missing CONTRIBUTING.md"; exit 1; }
        test -f CHANGELOG.md || { echo "Missing CHANGELOG.md"; exit 1; }
        test -f .gitignore || { echo "Missing .gitignore"; exit 1; }
        test -f .env.example || { echo "Missing .env.example"; exit 1; }
        
        echo "All required files present"
      shell: bash
    
    - name: Verify source structure
      run: |
        echo "Checking source structure..."
        
        test -d src || { echo "Missing src directory"; exit 1; }
        test -f src/index.js || { echo "Missing src/index.js"; exit 1; }
        test -f src/broker.js || { echo "Missing src/broker.js"; exit 1; }
        test -f src/strategy.js || { echo "Missing src/strategy.js"; exit 1; }
        test -f src/portfolio.js || { echo "Missing src/portfolio.js"; exit 1; }
        test -f src/config.js || { echo "Missing src/config.js"; exit 1; }
        test -f src/test.js || { echo "Missing src/test.js"; exit 1; }
        
        echo "Source structure valid"
      shell: bash
    
    - name: Verify documentation
      run: |
        echo "Checking documentation..."
        
        test -d docs || { echo "Missing docs directory"; exit 1; }
        test -f docs/GETTING_STARTED.md || { echo "Missing GETTING_STARTED.md"; exit 1; }
        test -f docs/NAVIGATION.md || { echo "Missing NAVIGATION.md"; exit 1; }
        
        echo "Documentation structure valid"
      shell: bash
    
    - name: Verify scripts
      run: |
        echo "Checking scripts..."
        
        test -d scripts || { echo "Missing scripts directory"; exit 1; }
        test -f scripts/check-dependencies.js || { echo "Missing check-dependencies.js"; exit 1; }
        test -f scripts/install-strategy-deps.js || { echo "Missing install-strategy-deps.js"; exit 1; }
        
        echo "Scripts present"
      shell: bash

  # Job 4: Dependency Check
  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Check for outdated packages
      run: npm outdated || true
    
    - name: Run dependency checker
      run: npm run check-deps

  # Job 5: Multi-Platform Testing
  test:
    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    needs: [lint, security, structure, dependencies]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm install
    
    - name: Create test .env file
      run: |
        echo "ALPACA_API_KEY=test_key" > .env
        echo "ALPACA_API_SECRET=test_secret" >> .env
        echo "ALPACA_PAPER=true" >> .env
        echo "TRADING_SYMBOL=BTC/USD" >> .env
      shell: bash
    
    - name: Run tests
      run: npm test
      continue-on-error: true
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
        ALPACA_PAPER: true
        TRADING_SYMBOL: BTC/USD

  # Job 6: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Verify package.json
      run: |
        echo "Verifying package.json..."
        node -e "const pkg = require('./package.json'); console.log('Package:', pkg.name, 'v' + pkg.version);"
    
    - name: Check for build artifacts
      run: |
        echo "Checking for unnecessary build artifacts..."
        if [ -d "dist" ] || [ -d "build" ]; then
          echo "WARNING: Found build directories that might not be needed"
        fi

  # Job 7: Release Preparation (only on tags)
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version matches package.json
      run: |
        PKG_VERSION=$(node -e "console.log(require('./package.json').version)")
        TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
        
        if [ "$PKG_VERSION" != "$TAG_VERSION" ]; then
          echo "ERROR: package.json version ($PKG_VERSION) doesn't match tag ($TAG_VERSION)"
          exit 1
        fi
        
        echo "Version verified: $PKG_VERSION"
    
    - name: Create Release Notes
      run: |
        echo "Creating release notes from CHANGELOG.md..."
        # Extract current version section from CHANGELOG
        sed -n "/## \[${{ steps.get_version.outputs.VERSION }}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
        cat release-notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 8: Status Report
  status:
    name: CI/CD Status Report
    runs-on: ubuntu-latest
    needs: [lint, security, structure, dependencies, test, build]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        echo "CI/CD Pipeline Status Report"
        echo "============================"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Structure: ${{ needs.structure.result }}"
        echo "Dependencies: ${{ needs.dependencies.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        
        if [ "${{ needs.lint.result }}" == "failure" ] || \
           [ "${{ needs.security.result }}" == "failure" ] || \
           [ "${{ needs.structure.result }}" == "failure" ] || \
           [ "${{ needs.dependencies.result }}" == "failure" ] || \
           [ "${{ needs.test.result }}" == "failure" ] || \
           [ "${{ needs.build.result }}" == "failure" ]; then
          echo "Pipeline FAILED"
          exit 1
        fi
        
        echo "Pipeline PASSED"
